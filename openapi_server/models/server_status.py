# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.player import Player
from openapi_server import util


class ServerStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: str=None, count_players: int=None, players: List[Player]=None):
        """ServerStatus - a model defined in OpenAPI

        :param state: The state of this ServerStatus.
        :param count_players: The count_players of this ServerStatus.
        :param players: The players of this ServerStatus.
        """
        self.openapi_types = {
            'state': str,
            'count_players': int,
            'players': List[Player]
        }

        self.attribute_map = {
            'state': 'state',
            'count_players': 'countPlayers',
            'players': 'players'
        }

        self._state = state
        self._count_players = count_players
        self._players = players

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerStatus of this ServerStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this ServerStatus.


        :return: The state of this ServerStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServerStatus.


        :param state: The state of this ServerStatus.
        :type state: str
        """
        allowed_values = ["stopped", "starting", "running", "stopping"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def count_players(self):
        """Gets the count_players of this ServerStatus.


        :return: The count_players of this ServerStatus.
        :rtype: int
        """
        return self._count_players

    @count_players.setter
    def count_players(self, count_players):
        """Sets the count_players of this ServerStatus.


        :param count_players: The count_players of this ServerStatus.
        :type count_players: int
        """

        self._count_players = count_players

    @property
    def players(self):
        """Gets the players of this ServerStatus.


        :return: The players of this ServerStatus.
        :rtype: List[Player]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this ServerStatus.


        :param players: The players of this ServerStatus.
        :type players: List[Player]
        """

        self._players = players
