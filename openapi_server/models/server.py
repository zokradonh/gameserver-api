# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.cluster import Cluster
from openapi_server.models.server_status import ServerStatus
from openapi_server import util


class Server(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, human_name: str=None, cluster: Cluster=None, title: str=None, port: int=None, hostname: str=None, status: ServerStatus=None):
        """Server - a model defined in OpenAPI

        :param name: The name of this Server.
        :param human_name: The human_name of this Server.
        :param cluster: The cluster of this Server.
        :param title: The title of this Server.
        :param port: The port of this Server.
        :param hostname: The hostname of this Server.
        :param status: The status of this Server.
        """
        self.openapi_types = {
            'name': str,
            'human_name': str,
            'cluster': Cluster,
            'title': str,
            'port': int,
            'hostname': str,
            'status': ServerStatus
        }

        self.attribute_map = {
            'name': 'name',
            'human_name': 'humanName',
            'cluster': 'cluster',
            'title': 'title',
            'port': 'port',
            'hostname': 'hostname',
            'status': 'status'
        }

        self._name = name
        self._human_name = human_name
        self._cluster = cluster
        self._title = title
        self._port = port
        self._hostname = hostname
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Server':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Server of this Server.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Server.


        :return: The name of this Server.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Server.


        :param name: The name of this Server.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def human_name(self):
        """Gets the human_name of this Server.


        :return: The human_name of this Server.
        :rtype: str
        """
        return self._human_name

    @human_name.setter
    def human_name(self, human_name):
        """Sets the human_name of this Server.


        :param human_name: The human_name of this Server.
        :type human_name: str
        """
        if human_name is None:
            raise ValueError("Invalid value for `human_name`, must not be `None`")

        self._human_name = human_name

    @property
    def cluster(self):
        """Gets the cluster of this Server.


        :return: The cluster of this Server.
        :rtype: Cluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Server.


        :param cluster: The cluster of this Server.
        :type cluster: Cluster
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")

        self._cluster = cluster

    @property
    def title(self):
        """Gets the title of this Server.


        :return: The title of this Server.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Server.


        :param title: The title of this Server.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def port(self):
        """Gets the port of this Server.


        :return: The port of this Server.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Server.


        :param port: The port of this Server.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def hostname(self):
        """Gets the hostname of this Server.


        :return: The hostname of this Server.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Server.


        :param hostname: The hostname of this Server.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def status(self):
        """Gets the status of this Server.


        :return: The status of this Server.
        :rtype: ServerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Server.


        :param status: The status of this Server.
        :type status: ServerStatus
        """

        self._status = status
