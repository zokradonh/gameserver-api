# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Game(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, update_by_docker_pull: bool=None, update_web_hook: str=None):
        """Game - a model defined in OpenAPI

        :param name: The name of this Game.
        :param update_by_docker_pull: The update_by_docker_pull of this Game.
        :param update_web_hook: The update_web_hook of this Game.
        """
        self.openapi_types = {
            'name': str,
            'update_by_docker_pull': bool,
            'update_web_hook': str
        }

        self.attribute_map = {
            'name': 'name',
            'update_by_docker_pull': 'updateByDockerPull',
            'update_web_hook': 'updateWebHook'
        }

        self._name = name
        self._update_by_docker_pull = update_by_docker_pull
        self._update_web_hook = update_web_hook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Game of this Game.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Game.


        :return: The name of this Game.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Game.


        :param name: The name of this Game.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def update_by_docker_pull(self):
        """Gets the update_by_docker_pull of this Game.


        :return: The update_by_docker_pull of this Game.
        :rtype: bool
        """
        return self._update_by_docker_pull

    @update_by_docker_pull.setter
    def update_by_docker_pull(self, update_by_docker_pull):
        """Sets the update_by_docker_pull of this Game.


        :param update_by_docker_pull: The update_by_docker_pull of this Game.
        :type update_by_docker_pull: bool
        """

        self._update_by_docker_pull = update_by_docker_pull

    @property
    def update_web_hook(self):
        """Gets the update_web_hook of this Game.


        :return: The update_web_hook of this Game.
        :rtype: str
        """
        return self._update_web_hook

    @update_web_hook.setter
    def update_web_hook(self, update_web_hook):
        """Sets the update_web_hook of this Game.


        :param update_web_hook: The update_web_hook of this Game.
        :type update_web_hook: str
        """

        self._update_web_hook = update_web_hook
