# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.game import Game
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, game: Game=None):
        """Cluster - a model defined in OpenAPI

        :param name: The name of this Cluster.
        :param game: The game of this Cluster.
        """
        self.openapi_types = {
            'name': str,
            'game': Game
        }

        self.attribute_map = {
            'name': 'name',
            'game': 'game'
        }

        self._name = name
        self._game = game

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Cluster.


        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def game(self):
        """Gets the game of this Cluster.


        :return: The game of this Cluster.
        :rtype: Game
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this Cluster.


        :param game: The game of this Cluster.
        :type game: Game
        """
        if game is None:
            raise ValueError("Invalid value for `game`, must not be `None`")

        self._game = game
